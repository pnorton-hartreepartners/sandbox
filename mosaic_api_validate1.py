'''
to validate the observation dates of historic years shown in the seasonal charts generated by the charting api
'''
import json

import pandas as pd
from mosaic_api_examples import prepare_inputs_for_api, example_kwargs_dict
from constants import PROD, URL_KWARGS, PARAMS_KWARGS
from mosaic_api_utils import get_any_api2, build_new_payload, post_any_api, process_new_chart_data

holidays_kwargs_dict = {
    'getHolidaysForCalendar':
        {URL_KWARGS: {},
        PARAMS_KWARGS: {'calendar': 'ICE'}
    }
}

historic_year_expiry_kwargs_dict = {'getExpiry':
    {URL_KWARGS:  {'key': 'B 202112'},
    PARAMS_KWARGS: {'exchange': 'ICE'}}
}

current_year_expiry_kwargs_dict = {'getExpiry': {
    URL_KWARGS:  {'key': 'B 202212'},
    PARAMS_KWARGS: {'exchange': 'ICE'}}
}

historic_year_ts_kwargs_dict = {'getSettlementTS': {
    URL_KWARGS:  {'instrument_key': 'B 202112'},
    PARAMS_KWARGS: {'exchange': 'ICE',
                    'allow_indicative': False}}
}

current_year_ts_kwargs_dict = {'getSettlementTS': {
    URL_KWARGS:  {'instrument_key': 'B 202212'},
    PARAMS_KWARGS: {'exchange': 'ICE',
                    'allow_indicative': False}}
}

start_date = pd.to_datetime('2020-01-01')
env = PROD


def get_expiry_date(kwargs_dict, env=PROD):
    api_name = 'getExpiry'
    url, params, method = prepare_inputs_for_api(api_name, env, kwargs_dict=kwargs_dict)
    response, expiry_date = get_any_api2(url, params=params)
    expiry_date = expiry_date['ExpirationDate']
    expiry_date = pd.to_datetime(expiry_date)
    print(expiry_date)
    return expiry_date


def get_chart_data():
    api_name = 'getTraderCurveTS'

    curves = [{'factor': 1, 'expression': 'BRT-F', 'contracts': ['202212']}]
    season = 3
    name = 'brent futs dec-22'
    chart_example = 'ebob_swap'  # any simple structure to use as a template then modify

    url, params, method = prepare_inputs_for_api(api_name, env, kwargs_dict=example_kwargs_dict)

    with open('mosaic_chart_examples.json') as file:
        chart_examples = json.load(file)
    print(chart_examples.keys())
    payload = chart_examples[chart_example]

    modified_payload = build_new_payload(payload, curves, season, name)
    response_dict = post_any_api(url, payload=modified_payload)
    title, df = process_new_chart_data(response_dict)
    return title, df


def get_settlement_ts(kwargs_dict):
    api_name = 'getSettlementTS'
    url, params, method = prepare_inputs_for_api(api_name, env, kwargs_dict=kwargs_dict)
    response = get_any_api2(url, params=params)
    df = pd.DataFrame(data=response)
    return df


if __name__ == '__main__':
    # get date indexes first
    historic_year_expiry_date = get_expiry_date(historic_year_expiry_kwargs_dict)
    current_year_expiry_date = get_expiry_date(current_year_expiry_kwargs_dict)

    api_name = 'getHolidaysForCalendar'
    url, params, method = prepare_inputs_for_api(api_name, env, kwargs_dict=holidays_kwargs_dict)
    response, holidays = get_any_api2(url, params=params)
    holidays = pd.to_datetime(holidays)

    historic_year_obs_index = pd.bdate_range(start=start_date, end=historic_year_expiry_date, freq='C', holidays=holidays)
    current_year_obs_index = pd.bdate_range(start=start_date, end=current_year_expiry_date, freq='C', holidays=holidays)

    historic_year_dates_ss = pd.Series(data=historic_year_obs_index.sort_values(ascending=False), name='2021')
    current_year_dates_ss = pd.Series(data=current_year_obs_index.sort_values(ascending=False), name='2022')

    # seasonal price data
    title, seasonal_df = get_chart_data()

    # get vanilla contract settlements for our two contracts
    current_year_prices_df = get_settlement_ts(current_year_ts_kwargs_dict)
    historic_year_prices_df = get_settlement_ts(historic_year_ts_kwargs_dict)

    # now just some munging
    column_names = ['index', 'date', 'values']

    historic_year_dates_df = historic_year_dates_ss.to_frame()
    historic_year_dates_df.reset_index(inplace=True, drop=False)
    historic_year_prices_df['date'] = historic_year_prices_df['date'].astype('datetime64')
    historic_year_prices_df = historic_year_dates_df.merge(historic_year_prices_df, how='left', left_on='2021', right_on='date')
    historic_year_prices_df.drop(labels=['date', 'label'], axis='columns', inplace=True)
    historic_year_prices_df.columns = column_names

    current_year_dates_df = current_year_dates_ss.to_frame()
    current_year_dates_df.reset_index(inplace=True, drop=False)
    current_year_prices_df['date'] = current_year_prices_df['date'].astype('datetime64')
    current_year_prices_df = current_year_dates_df.merge(current_year_prices_df, how='left', left_on='2022', right_on='date')
    current_year_prices_df.drop(labels=['date', 'label'], axis='columns', inplace=True)
    current_year_prices_df.columns = column_names

    # and join the two years on the index ie days from expiry
    prices_df = current_year_prices_df.merge(historic_year_prices_df, left_on='index', right_on='index', how='outer',
                                 suffixes=['_2022', '_2021'])

    prices_df.to_clipboard(index=False)



    pass




